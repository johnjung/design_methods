#!/usr/local/bin/python

import io
import openpyxl

from flask import Flask, request, Response, send_file
from openpyxl.utils import get_column_letter
from openpyxl.writer.excel import save_virtual_workbook
from scipy.cluster.hierarchy import dendrogram, linkage  

def get_worksheet_labels(worksheet):
  """Return the worksheet labels as a list. 
   
     Arguments:
     worksheet -- an openpyxl worksheet.

     Returns:
     list of labels. 
  """
  if worksheet['A1'].value is None or isinstance(worksheet['A1'].value, str):
    labels = []
    for row in worksheet.iter_rows():
      for x, cell in enumerate(row):
        if x == 0 and cell.value is None:
          continue
        elif isinstance(cell.value, str):
          labels.append(cell.value)
        else:
          return labels
  else:
    return []


def get_worksheet_data(worksheet):
  """Get the data from this worksheet as a 2d array.

     Arguments:
     worksheet -- an openpyxl worksheet.

     Returns:
     2d list of floats or ints, e.g. [[1.0, 0.0, 0.0],
                                      [0.0, 1.0, 0.0],
                                      [0.0, 0.0, 1.0]]
  """
  data = []
  for y, row in enumerate(worksheet.iter_rows()):
    # skip headers. 
    if y == 0 and (row[0].value is None or isinstance(row[0].value, str)):
      continue
    else:
      data_row = []
      for x, cell in enumerate(row):
        # skip headers.
        if cell.value is None or isinstance(cell.value, str):
          continue
        data_row.append(cell.value)
      data.append(data_row)
  return data


def validate_worksheet(worksheet):
  """Confirm that the worksheet contains a symmetric matrix of similarity or
     distance data, with or without labels.

     Arguments:
     worksheet == an openpyxl worksheet.

     Side Effect:
     raises AssertionErrors if the worksheet is invalid. 
  """
  data = get_worksheet_data(worksheet)

  # be sure the data is a square matrix. 
  assert len(data) == len(data[0])

  # the matrix should be symmetric. 
  for y in range(0, len(data)):
    for x in range(0, len(data[0])):
      if not data[y][x] == data[x][y]:
        raise AssertionError

  # the diagonal should all be the same number. 
  for i in range(0, len(data)):
    if not data[i][i] == data[0][0]:
      raise AssertionError

  # the entries should all be numbers. 
  for y in range(0, len(data)):
    for x in range(0, len(data[0])):
      if not (isinstance(data[y][x], int) or isinstance(data[y][x], float)):
        raise AssertionError


def add_reordered_worksheet(workbook, index_order):
  """Reorder the worksheet after clustering.
  
     Arguments:
     workbook    -- an openpyxl workbook where the active sheet contains
                    insight matrix data. 
     index_order -- a list of unique indices.

     Side Effect:
     Adds a reordered worksheet to the workbook. 
  """

  labels = get_worksheet_labels(workbook.active)
  data = get_worksheet_data(workbook.active)

  # add a new worksheet.
  new_worksheet = workbook.create_sheet('ordered matrix')

  # update labels. 
  if labels:
    for a, b in enumerate(index_order):
      column_letter = get_column_letter(a+2)
      new_worksheet[column_letter + '1'] = labels[b]
      new_worksheet['A' + str(a+2)] = labels[b]

  # update data.
  for y in range(0, len(data)):
    for x in range(0, len(data[0])):
      column_letter = get_column_letter(x+2)
      new_worksheet[column_letter + str(y+2)] = data[index_order[y]][index_order[x]]


app = Flask(__name__) 
app.config['UPLOAD_FOLDER'] = '/tmp'

@app.route('/sort', methods=['POST'])
def sort_insight_matrix():
  if 'spreadsheet' not in request.files:
    return Response("{'error': 'No spreadsheet part'}", status=400, mimetype='application/json')

  filestorage = request.files['spreadsheet']

  if filestorage.filename == '':
    return Response("{'error': 'No selected file'}", status=400, mimetype='application/json')

  if not (filestorage.filename.endswith('.xlsx')):
    return Response("{'error': 'Unsupported file type'}", status=400, mimetype='application/json')

  workbook = openpyxl.load_workbook(filestorage, data_only=True)
  return Response("{'ok': 'made it...'}", status=200, mimetype='application/json')

  worksheet = workbook.active
  validate_worksheet(worksheet)
  data = get_worksheet_data(worksheet)

  # build a dendrogram.
  D = dendrogram(linkage(data, 'single'),
                 distance_sort='descending',
                 no_plot=True,
                 orientation='top',
                 show_leaf_counts=True)

  # add a reordered worksheet.
  add_reordered_worksheet(workbook, D['leaves'])

  # return the workbook to the user. 
  '''
  bio = io.BytesIO(save_virtual_workbook(workbook))
  send_file(
    bio,
    mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  )
  '''

if __name__ == '__main__':
  app.run(debug=True, host='0.0.0.0')
